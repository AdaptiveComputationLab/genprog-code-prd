(* edit MLM version only! *) 
open Lexerint      (* tLexerInterface *)
open Difflexer         (* tToken, readToken *)
open Parsetables   (* tParseTables *)
open Useract       (* tUserActions *)
open Glr           (* tGLR, makeGLR, glrParse *)

open Ptreeact      (* tParseTreeLexer, makeParseTreeActions *)
open Ptreenode     (* tPTreeNode, printTree *)

include(tokens.lexint)

let parse lexbuf = 
  let (tables:tParseTables), (actions:tUserActions) =
    (Mycparser.cParserParseTables, Mycparser.cParserUserActions)
  in
  let lex:tLexerInterface = ((new tLexer lexbuf) :> tLexerInterface) in
  (lex#getToken());
 let (sval:tSemanticValue) =
    (* use GLR *)
    let glr:tGLR = (makeGLR tables actions) in
    let treeTop: tSemanticValue ref = ref cNULL_SVAL in
    let parse_result = (glrParse glr lex) treeTop in 
    if not parse_result then E.parse_error "GLR parse error 1" ;
    !treeTop
  in
  let (top:Cabs.definition list) = 
    ((Obj.obj sval) : Cabs.definition list) in 
  top 

let parse_file filename = 
  let lexbuf = Difflexer.init filename in 
  let res = parse lexbuf in
  Difflexer.finish ();
  res 
