  0   :  EOF;
  1   : PREFER_REDUCE;
  2   : PREFER_SHIFT;
  3   :  EQ				"=";
  4   :  PLUS_EQ		"+=";
  5   :  MINUS_EQ		"-=";
  6   :  STAR_EQ		"*=";
  7   :  SLASH_EQ		"/=";
  8   :  PERCENT_EQ		"%=";
  9   :  AND_EQ			"&=";
  10  :  PIPE_EQ		"|=";
  11  :  CIRC_EQ		"^=";
  12  :  INF_INF_EQ		"<<=";
  13  :  SUP_SUP_EQ		">>=";
  14  :  ARROW			"->";
  15  :  DOT			".";
  16  :  EQ_EQ			"==";
  17  :  EXCLAM_EQ		"!=";
  18  :  INF			"<";
  19  :  SUP			">";
  20  :  INF_EQ			"<=";
  21  :  SUP_EQ			">=";
  22  :  SLASH			"/";
  23  :  PERCENT		"%";
  24  :  PIPE			"|";
  25  :  CIRC			"^";
  26  :  PIPE_PIPE		"||";
  27  :  INF_INF		"<<";
  28  :  SUP_SUP		">>";
  29  :  RPAREN			")";
  30  :  LBRACKET		"[";
  31  :  RBRACKET		"]";
  32  :  COLON			":";
  33  :  COMMA			",";
  34  :  ELLIPSIS		"...";
  35  :  QUEST			"?";
  36  :  ELSE			"else";
  37  : LABEL__;
  38  : BUILTIN_VA_LIST;
  39  : BLOCKATTRIBUTE;
  40  : PRAGMA_EOL;
  41  : AT_NAME;
  42  :  IDENT;
  43  :  CST_CHAR;
  44  :  CST_WCHAR;
  45  :  CST_INT;
  46  :  CST_FLOAT;
  47  :  NAMED_TYPE;
  48  :  CST_STRING;
  49  :  CST_WSTRING;
  50  :  CHAR			"char";
  51  : INT				"int";
  52  : DOUBLE			"double";
  53  : FLOAT			"float";
  54  : VOID			"void";
  55  : INT64;
  56  :  INT32;
  57  :  ENUM			"enum";
  58  :  STRUCT			"struct";
  59  :  TYPEDEF		"typedef";
  60  :  UNION			"union";
  61  :  SIGNED			"signed";
  62  :  UNSIGNED		"unsigned";
  63  :  LONG			"long";
  64  :  SHORT			"short";
  65  :  VOLATILE		"volatile";
  66  :  EXTERN			"extern";
  67  :  STATIC			"static";
  68  :  CONST			"const";
  69  :  RESTRICT		"restrict";
  70  :  AUTO			"auto";
  71  :  REGISTER		"register";
  72  :  THREAD			"thread";
  73  :  SIZEOF			"sizeof";
  74  :  ALIGNOF		"alignof";
  75  :  PLUS			"+";
  76  :  MINUS			"-";
  77  :  STAR			"*";
  78  :  TILDE			"~";
  79  :  AND			"&";
  80  :  EXCLAM			"!";
  81  :  AND_AND		"&&";
  82  :  PLUS_PLUS		"++";
  83  :  MINUS_MINUS	"--";
  84  :  LPAREN			"(";
  85  :  RBRACE			"}";
  86  :  LBRACE			"{";
  87  :  SEMICOLON		";";
  88  :  BREAK			"break";
  89  :  CONTINUE		"continue";
  90  :  GOTO			"goto";
  91  :  RETURN			"return";
  92  :  SWITCH			"switch";
  93  :  CASE			"case";
  94  :  DEFAULT		"default";
  95  :  WHILE			"while";
  96  :  DO				"do";
  97  :  FOR			"for";
  98  :  IF				"if";
  99  :  TRY			"try";
  100 :  EXCEPT			"except";
  101 :  FINALLY		"finally";
  102 :  ATTRIBUTE;
  103 :  INLINE			"inline";
  104 :  ASM;
  105 :  TYPEOF			;
  106 :  FUNCTION__;
  107 : PRETTY_FUNCTION__;
  108 : BUILTIN_VA_ARG;
  109 : ATTRIBUTE_USED;
  110 : BUILTIN_TYPES_COMPAT;
  111 : BUILTIN_OFFSETOF;
  112 : DECLSPEC;
  113 : MSASM;
  114 : MSATTR;
  115 : PRAGMA_LINE;
  116 : PRAGMA			"pragma";
  117 : AT_TRANSFORM;
  118 : AT_TRANSFORMEXPR;
  119 : AT_SPECIFIER;
  120 : AT_EXPR;
  121 : PREIF;
  122 : PREENDIF;
  123 : PREIFNDEF;
  124 : PREDEFINE;
  125 : PREINCLUDE;
  126 : PREPASTE;
  127 : PREELSE ;
  128 : PREUNDEF;
  129 : PREELSEIF;
  130 : PREDEFINED;
  131 : PREIFDEF;

  token(string * Cabs.cabsloc) IDENT;
  token(int64 list * Cabs.cabsloc) CST_CHAR;
  token(int64 list * Cabs.cabsloc) CST_WCHAR;
  token(string * Cabs.cabsloc) CST_INT;
  token(string * Cabs.cabsloc) CST_FLOAT;
  token(string * Cabs.cabsloc) NAMED_TYPE;
  token(int64 list * Cabs.cabsloc) CST_STRING;
  token(int64 list * Cabs.cabsloc) CST_WSTRING;
  token(Cabs.cabsloc) CHAR;
  token(Cabs.cabsloc) INT;
  token(Cabs.cabsloc) DOUBLE;
  token(Cabs.cabsloc) FLOAT;
  token(Cabs.cabsloc) VOID;
  token(Cabs.cabsloc) INT64;
  token(Cabs.cabsloc) INT32;
  token(Cabs.cabsloc) ENUM;
  token(Cabs.cabsloc) STRUCT;
  token(Cabs.cabsloc) TYPEDEF;
  token(Cabs.cabsloc) UNION;
  token(Cabs.cabsloc) SIGNED;
  token(Cabs.cabsloc) UNSIGNED;
  token(Cabs.cabsloc) LONG;
  token(Cabs.cabsloc) SHORT;
  token(Cabs.cabsloc) VOLATILE;
  token(Cabs.cabsloc) EXTERN;
  token(Cabs.cabsloc) STATIC;
  token(Cabs.cabsloc) CONST;
  token(Cabs.cabsloc) RESTRICT;
  token(Cabs.cabsloc) AUTO;
  token(Cabs.cabsloc) REGISTER;
  token(Cabs.cabsloc) THREAD;
  token(Cabs.cabsloc) SIZEOF;
  token(Cabs.cabsloc) ALIGNOF;
  token(Cabs.cabsloc) PLUS;
  token(Cabs.cabsloc) MINUS;
  token(Cabs.cabsloc) STAR;
  token(Cabs.cabsloc) TILDE;
  token(Cabs.cabsloc) AND;
  token(Cabs.cabsloc) EXCLAM;
  token(Cabs.cabsloc) AND_AND;
  token(Cabs.cabsloc) PLUS_PLUS;
  token(Cabs.cabsloc) MINUS_MINUS;
  token(Cabs.cabsloc) LPAREN;
  token(Cabs.cabsloc) RBRACE;
  token(Cabs.cabsloc) LBRACE;
  token(Cabs.cabsloc) SEMICOLON;
  token(Cabs.cabsloc) COLON;
  token(Cabs.cabsloc) BREAK;
  token(Cabs.cabsloc) CONTINUE;
  token(Cabs.cabsloc) GOTO;
  token(Cabs.cabsloc) RETURN;
  token(Cabs.cabsloc) SWITCH;
  token(Cabs.cabsloc) CASE;
  token(Cabs.cabsloc) DEFAULT;
  token(Cabs.cabsloc) WHILE;
  token(Cabs.cabsloc) DO;
  token(Cabs.cabsloc) FOR;
  token(Cabs.cabsloc) IF;
  token(Cabs.cabsloc) TRY;
  token(Cabs.cabsloc) EXCEPT;
  token(Cabs.cabsloc) FINALLY;
  token(Cabs.cabsloc) ATTRIBUTE;
  token(Cabs.cabsloc) INLINE;
  token(Cabs.cabsloc) ASM;
  token(Cabs.cabsloc) TYPEOF;
  token(Cabs.cabsloc) FUNCTION__;
  token(Cabs.cabsloc) PRETTY_FUNCTION__;
  token(Cabs.cabsloc) BUILTIN_VA_ARG;
  token(Cabs.cabsloc) ATTRIBUTE_USED;
  token(Cabs.cabsloc) BUILTIN_TYPES_COMPAT;
  token(Cabs.cabsloc) BUILTIN_OFFSETOF;
  token(Cabs.cabsloc) DECLSPEC;
  token(string * Cabs.cabsloc) MSASM;
  token(string * Cabs.cabsloc) MSATTR;
  token(string * Cabs.cabsloc) PRAGMA_LINE;
  token(Cabs.cabsloc) PRAGMA_EOL;
  token(Cabs.cabsloc) PRAGMA;
  token(Cabs.cabsloc) AT_TRANSFORM;
  token(Cabs.cabsloc) AT_TRANSFORMEXPR;
  token(Cabs.cabsloc) AT_SPECIFIER;
  token(Cabs.cabsloc) AT_EXPR;
  token(Cabs.cabsloc) LBRACKET;
  token(Cabs.cabsloc) RBRACKET;
  token(Cabs.cabsloc) COMMA;
  token(Cabs.cabsloc) RPAREN;
  token(Cabs.cabsloc) DOT;
  token(Cabs.cabsloc) ARROW;
  token(Cabs.cabsloc) ELSE;
  token(Cabs.cabsloc) PREIF;
  token(Cabs.cabsloc) PREENDIF;
  token(Cabs.cabsloc) PREIFNDEF;
  token(Cabs.cabsloc) PREDEFINE;
  token(Cabs.cabsloc) PREINCLUDE;
  token(Cabs.cabsloc) PREPASTE;
  token(Cabs.cabsloc) PREELSE;
  token(Cabs.cabsloc) PREUNDEF;
  token(Cabs.cabsloc) PREELSEIF;
  token(Cabs.cabsloc) PREDEFINED;
  token(Cabs.cabsloc) PREIFDEF;
